{"version":3,"sources":["enums.js","Image.js","App.js","serviceWorker.js","index.js"],"names":["PHOTO_HEIGHT","HEADER_HEIGHT","TOP_MARGIN","Image","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasImageLoaded","img","React","createRef","current","complete","setState","_this2","_this$props","image","activeIds","id","forwardedRef","react_default","a","createElement","ref","style","height","width","marginTop","backgroundColor","colors","borderRadius","includes","file","className","onLoad","src","concat","dir","alt","Component","forwardRef","Image_Image","assign","photoData","sort","b","parseInt","groupedData","groupBy","photo","parseDate","_ref","slice","year","App","activeThing","ratio","date","docHeight","length","buckets","uniqBy","map","_ref2","rootRef","singleRefs","reduce","acc","value","observer","IntersectionObserver","entries","forEach","entry","target","intersectionRatio","values","prevState","objectSpread","toConsumableArray","root","threshold","Array","fill","v","i","observe","_this3","display","justifyContent","flex","position","flexDirection","marginLeft","marginBottom","bucket","idx","href","key","fontSize","color","fontWeight","textDecoration","month","split","reverse","join","src_Image","flexGrow","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17fdd205.chunk.js","sourcesContent":["export const BASE_URL = 'https://storage.googleapis.com/ig-me/photos'\nexport const PHOTO_HEIGHT = 500\nexport const HEADER_HEIGHT = 50\nexport const TOP_MARGIN = 30\n","import React from 'react'\n\nimport { BASE_URL, PHOTO_HEIGHT, TOP_MARGIN } from './enums'\n\nclass Image extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasImageLoaded: false\n    }\n    this.img = React.createRef()\n  }\n\n  componentDidMount() {\n    if (this.img.current && this.img.current.complete) {\n      this.setState({ hasImageLoaded: true })\n    }\n  }\n\n  render() {\n    const { image, activeIds, id, forwardedRef } = this.props\n    return (\n      <div\n        ref={forwardedRef}\n        id={id}\n        style={{\n          height: PHOTO_HEIGHT,\n          width: 500,\n          marginTop: TOP_MARGIN,\n          backgroundColor: image.colors[0],\n          borderRadius: 3\n        }}\n      >\n        {activeIds.includes(image.file) && (\n          <img\n            ref={this.img}\n            className={this.state.hasImageLoaded ? 'fade-in-card' : 'hidden-card'}\n            onLoad={() => this.setState({ hasImageLoaded: true })}\n            src={`${BASE_URL}/${image.dir}/${image.file}`}\n            alt=\"img\"\n            style={{ width: 500, height: PHOTO_HEIGHT, borderRadius: 3 }}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default React.forwardRef((props, ref) => <Image forwardedRef={ref} {...props} />)\n","import React, { Component } from 'react'\nimport uniqBy from 'lodash/uniqBy'\nimport groupBy from 'lodash/groupBy'\n\nimport photoData from './photoData.json'\nimport { PHOTO_HEIGHT, TOP_MARGIN, HEADER_HEIGHT } from './enums'\nimport Image from './Image'\n\nphotoData.sort((a, b) => parseInt(b.dir) - parseInt(a.dir))\nconst groupedData = groupBy(photoData, photo => photo.dir)\n\nconst parseDate = dir => {\n  const [year, month] = [dir.slice(0, 4), dir.slice(4)]\n  return `${month} - ${year}`\n}\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeThing: { id: [], ratio: 0, date: null },\n      activeIds: [],\n      docHeight: photoData.length * (PHOTO_HEIGHT + TOP_MARGIN) + HEADER_HEIGHT\n    }\n\n    this.buckets = uniqBy(photoData, 'dir').map(({ dir }) => parseDate(dir))\n    this.rootRef = React.createRef()\n    this.singleRefs = photoData.reduce((acc, value) => {\n      acc[value.file] = {\n        date: parseDate(value.dir),\n        id: value.file,\n        ref: React.createRef(),\n        ratio: 0\n      }\n      return acc\n    }, {})\n\n    const callback = entries => {\n      entries.forEach(entry => (this.singleRefs[entry.target.id].ratio = entry.intersectionRatio))\n      const activeThing = Object.values(this.singleRefs).reduce(\n        (acc, value) => (value.ratio > acc.ratio ? value : acc),\n        this.state.activeThing\n      )\n\n      if (activeThing.ratio > this.state.activeThing.ratio) {\n        this.setState(prevState => {\n          return {\n            ...prevState,\n            activeThing,\n            activeIds: prevState.activeIds.includes(activeThing.id)\n              ? prevState.activeIds\n              : [...prevState.activeIds, activeThing.id]\n          }\n        })\n      }\n    }\n\n    this.observer = new IntersectionObserver(callback, {\n      root: this.rootRef.current,\n      threshold: new Array(101).fill(0).map((v, i) => i * 0.01)\n    })\n  }\n\n  componentDidMount() {\n    Object.values(this.singleRefs).forEach(value => this.observer.observe(value.ref.current))\n  }\n\n  render() {\n    return (\n      <div style={{ height: this.state.docHeight, display: 'flex', justifyContent: 'center' }}>\n        <div style={{ flex: 1 }}>\n          <div\n            style={{\n              position: 'fixed',\n              display: 'flex',\n              flexDirection: 'column',\n              height: 'calc(100vh - 24px)',\n              marginLeft: 16,\n              marginTop: 12,\n              marginBottom: 12\n            }}\n          >\n            {this.buckets.map((bucket, idx) => {\n              return (\n                <a\n                  href={`#${bucket}`}\n                  key={idx}\n                  style={{\n                    flex: 1,\n                    fontSize: 12,\n                    color: this.state.activeThing.date === bucket ? 'black' : 'gray',\n                    fontWeight: this.state.activeThing.date === bucket ? 700 : 400,\n                    textDecoration: 'underline'\n                  }}\n                >\n                  {bucket}\n                </a>\n              )\n            })}\n          </div>\n        </div>\n        <div style={{ flex: 1 }} ref={this.rootRef}>\n          {this.buckets.map(month => {\n            return (\n              <div id={month}>\n                {groupedData[\n                  month\n                    .split(' - ')\n                    .reverse()\n                    .join('')\n                ].map((image, idx) => {\n                  return (\n                    <Image\n                      key={idx}\n                      ref={this.singleRefs[image.file].ref}\n                      id={this.singleRefs[image.file].id}\n                      activeIds={this.state.activeIds}\n                      image={image}\n                    />\n                  )\n                })}\n              </div>\n            )\n          })}\n        </div>\n        <div style={{ display: 'flex', flexGrow: 1, justifyContent: 'flex-end', marginTop: 12, marginRight: 16 }}>\n          <span style={{ position: 'fixed', fontWeight: 700, fontSize: 12 }}>IG-ME</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}